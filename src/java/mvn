#! /usr/bin/env bash

# wrapper for mvn, making it more the way I want it to be.
# by torstein.k.johansen at gmail dot com

log=$HOME/.$(basename $0)/current.log
mvn_cmd=/usr/bin/mvn
debug_enabled=1
tail_log=0

function bootstrap_thyself() {
  local library_list="
    common/io/runtime.sh
    common/text/color.sh
  "
  for el in ${library_list}; do
    source $(dirname $0)/../${el} || {
      echo "I need common library ${el} to run :-("
      exit 1
    }
  done

  fail_safe_run mkdir -p $(dirname $log)
}

function debug() {
  if [ ${debug_enabled-0} -eq 1 ]; then
    echo "$@" | fmt
  fi
}

## $1 :: output log file
function print_output_the_way_i_want_it() {
  cat "$1" | \
    sed -e 's#\[ERROR\][ ]*##' \
    -e 's#\[DEBUG\][ ]*##' \
    -e 's#\[INFO\][ ]*##' \
    -e 's#[[]##g' \
    -e 's#[]]##g' \
    -e 's#\([0-9]*\)[,]\([0-9]*\) #\1:\2:#'
}

bootstrap_thyself

clear
# this seperator is equal to the seperator Maven uses.
seperator="------------------------------------------------------------------------"
echo ${seperator}
fortune 2>/dev/null | fmt
echo ${seperator}

echo "Running command: ${mvn_cmd} $@"
if [ ${tail_log-0} -eq 1 ]; then
  touch ${log}
  tail -f ${log} &
else
  debug "Logging to     : ${log}"
fi

${mvn_cmd} "$@" &> ${log}
mvn_exit_code=$?

print_output_the_way_i_want_it ${log}
echo "I think the $(green most important things) are:"
grep "The POM for" ${log}
grep "duplicate declaration " ${log}
egrep "The project.*has.*error" ${log}

exit $mvn_exit_code

